; intmap.asm - 
; low-level interrupt transfer table and dispatcher

	%include	"../h/dos.asm"

tblsize	equ	20h			; define max size of intmap table
stksize	equ	200h			; max size of system stack

	dseg

	global	sys_imp
;_sys_imp	dd	far ptr intmap
sys_imp		dd	intmap
	endds

code:
;	pseg

	global	pcxflag, sssave, spsave

pcxflag         dw      1               ; zero when rescheduling disabled
intstack	times stksize db	0	; interrupt stack
;topstack	label	byte
topstack:
spsave		dw	0		; saved stack pointer register
sssave		dw	0		; saved stack segment register

;-------------------------------------------------------------------------
; intmap  --  interrupt dispatch table
;-------------------------------------------------------------------------
intmap:;	label	byte

	%rep	tblsize

	db	0			; ivec   - interrupt vector number
	call	intcom
	dd	0			; oldisr - old isr from bios (seg:off)
	dd	0			; newisr - new isr code address
	dw	0			; mdevno - minor device number
	dw	0			; iflag  - interrupt flag

	%endrep
;	endm

;	ASSUME DS:NOTHING

;-------------------------------------------------------------------------
; intcom  --  common interrupt dispatcher
;-------------------------------------------------------------------------
; This procedure is interupt handling code that is common to all interupt
; service routines.
intcom:;	proc	near
	push	bp
	mov	bp,sp
	push	ax			; push registers
	push	bx
        push    si
        push    di
        mov     bx,[bp+2]               ; get pointer to intmap data
	mov	ax,[cs:bx+10]		; get interrupt flag
	or	al,al			; zero?
	je	short nobios  		; yes, skip the call to the BIOS
	pushf				; push flags to simulate interrupt
;	call	cs:dword ptr[bx]	; call BIOS ISR
	call	[cs:bx]		; call BIOS ISR
;	cli				; be *sure* interrupts are back off
nobios:
	push	cx			; save rest of registers
	push	dx
	push	ds
	push	es
	mov	[cs:sssave],ss		; save stack environment
	mov	[cs:spsave],sp
	mov	ecx, code		; get text segment address
;	mov	cx, code		; DON'T FIT
; bp+6 points to code segment where interrupt occurred
	cmp	cx,[bp+6]		; check if we own interrupt
	ja	short newstack
;	mov	cx,DGROUP		; get bottom of data group
;	mov	cx, code		; DON'T FIT
	mov	ecx, code		; get bottom of data group
					; (= top of code segments)
	cmp	cx,[bp+6]
	jb	short newstack
; time to do our ISR, since the stack and data segments are OK
;	push	cs:word ptr[bx+8]	; pass minor dev. no.
;	call	cs:dword ptr[bx+4]	; call C ISR (saves si, di)
	push	word [cs:bx+8]	; pass minor dev. no.
	call	dword [cs:bx+4]	; call C ISR (saves si, di)
	add	sp,2			; deallocate parameter (C convention)
	jmp	short popregs
newstack:
; now set up temporary stack and do our ISR
;	mov	ax,DGROUP
;	mov	ax,code
	mov	eax,code
	mov	ds,ax			; set default data segment to DGROUP
;	mov	cx,_TEXT		; get text segment address
;	mov	cx,code		; get text segment address
	mov	ecx,code		; get text segment address
	mov	ss,cx			; and set up temporary stack
	;mov	sp,offset code:topstack
;	mov	sp,topstack
	mov	esp,topstack
	xor	ax,ax			; clear pcxflag to prevent reschedules
	xchg	ax,[cs:pcxflag]
	push	ax			; save for later
;	push	cs:word ptr[bx+8]	; pass minor dev. no.
;	call	cs:dword ptr[bx+4]	; call our routine (saves si, di)
	push	word [cs:bx+8]	; pass minor dev. no.
	call	word [cs:bx+4]	; call our routine (saves si, di)
	add	sp,2			; deallocate parameter (C convention)
	pop	word [cs:pcxflag]		; restore pcxflag
	mov	ss,[cs:sssave]		; restore old stack
	mov	sp,[cs:spsave]
popregs:
	pop	es			; restore all registers
	pop	ds
	pop	dx
	pop	cx
        pop     di
        pop     si
        pop     bx
	pop	ax
	pop	bp
	add	sp,2			; remove pointer to intmap area
	iret
;intcom	endp

	endps

	end
