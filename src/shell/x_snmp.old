/* x_snmp.c - x_snmp */

#include <conf.h>
#include <kernel.h>
#include <network.h>
#include <tty.h>
#include <ctype.h>
#include <snmp.h>
#include <asn1.h>
#include <mib.h>
#include <mem.h>

LOCAL	echoch(), erase1(), eraseall(), eraseword(), snusage(), getword();
struct snbentry *parseoid();
struct snbentry *getnewbl();

#define EXIT		'\004'		/* \004 is Cntl-d		*/
#define COMPLETE	'\011'		/* \011 is TAB			*/
#define KILLWORD	'\027'		/* \027 is Cntl-w		*/
#define NEXT        '\016'      /* \016 is Cntl-n       */

#define M_COMPL		1		/* completion mode 		*/
#define M_CHARIN	2		/* char-in mode 		*/

#define PROMPT		"snmp > "
#define EXITSTR		"exit"

#define BUFSIZE		256
char	buf[BUFSIZE];			/* buffer to hold the input line*/
char	str2compl[BUFSIZE];		/* string to complete 		*/
int	s2clen;				/* length of str2compl		*/
int	completions[BUFSIZE];		/* array of indices into the mib*/
					/* array to signal completions	*/
int	num_completions;		/* # of indices in completions[]*/
int	next_completion;		/* next completion to try	*/

/*------------------------------------------------------------------------
 * x_snmp - SNMP shell that does MIB object name completion
 *------------------------------------------------------------------------
 */
x_snmp(nargs, args)
int     nargs;
char	*args[];
{
	char	ch, snmpservstr[BUFSIZE];
	struct	tty	*ttyp;
	int	len, ct, i, mode;
	IPaddr	destmach;

	if (nargs != 2) {
        snusage();
		return OK;
	}
	args++;  nargs--;
    sninit();
	if (name2ip(destmach, *args) == SYSERR) {
        fprintf(STDOUT,"snmp: couldn't resolve name %s\n", *args);
		return OK;
	}
	ip2dot(snmpservstr, destmach);
	sprintf(snmpservstr + strlen(snmpservstr), ":%d", SNMPPORT);
    ttyp = &tty[STDIN];
	ct = 0;
	mode = M_CHARIN;
	next_completion = num_completions = 0;

    control(STDIN, TCMODER);    /* put STDIN into raw mode */
    ttyp->evis = FALSE;
    ttyp->ieback = TRUE;
    ttyp->ierase = TRUE;
    write(STDOUT, PROMPT, strlen(PROMPT));  /* print the prompt */

	while (TRUE) {
        if ((ch = getc(STDIN)) == EOF) {
            write(STDOUT, EXITSTR, strlen(EXITSTR));
            putc(STDOUT, '\n');
            control(STDIN, TCMODEC);
			return OK;
		}
		if (ch == COMPLETE) {
			if (mode == M_CHARIN) {
				mode = M_COMPL;
				/* find beginning of word */
				for (i=ct-1; i >= 0 && buf[i] != BLANK;
						i--)
					/* empty */;
				s2clen = ct - ++i;
				strncpy(str2compl, buf + i, s2clen);
				find_completions();
			}
			if (num_completions == 0) {
                putc(STDOUT, BELL);
				mode = M_CHARIN;
			} else
                print_completion(ttyp, &ct);
			continue;
		}
		if (ch == KILLWORD && mode == M_COMPL) {
            /* kill word in compl. mode goes back to
			   original string to complete. */
            eraseword(ttyp, &ct);
			strncpy(buf + ct, str2compl, s2clen);
            write(STDOUT, buf + ct, s2clen);
			ct += s2clen;
			mode = M_CHARIN;
			next_completion = num_completions = 0;
			continue;
		}
		if (mode == M_COMPL) {	/* && ch != KILLWORD */
			mode = M_CHARIN;
			str2compl[(s2clen = 0)] = '\0';
			num_completions = next_completion = 0;
		}
		if (ch == KILLWORD) {	/* && mode != M_COMPL */
            eraseword(ttyp, &ct);
			continue;
		}
		if (ch == ttyp->ikillc && ttyp->ikill) {
            eraseall(ttyp, ct);
			ct = 0;
			continue;
		}
        if (ch == BACKSP) {
			if (ct > 0) 
                erase1(ttyp, --ct);
			continue;
		}
		if (ch == RETURN) {
            echoch(ch, ttyp);
			buf[ct] = '\0';
			if (strequ(buf, EXITSTR)) {
                control(STDIN, TCMODEC);
				return OK;
			}
            sendquery(snmpservstr);
			for (i = 0; i < BUFSIZE; i++)
				buf[i] = '\0';
            write(STDOUT, PROMPT, strlen(PROMPT));
			ct = 0;
			continue;
		}
        if (ch == NEXT) {
            echoch(RETURN, ttyp);
            strcpy(buf,"next");
            ct = ct + 4;
            buf[ct] = '\0';
            sendquery(snmpservstr);
			for (i = 0; i < BUFSIZE; i++)
				buf[i] = '\0';
            write(STDOUT, PROMPT, strlen(PROMPT));
			ct = 0;
			continue;
        }
        /* all non-special characters */
		if (ct == BUFSIZE - 1) 
            putc(STDOUT, BELL);
		else {
            echoch(ch, ttyp);
			buf[ct++] = ch;
		}
	}
}

/*------------------------------------------------------------------------
 * print_completion - write the next name completion to STDOUT
 *------------------------------------------------------------------------
 */
print_completion(ttyp, ct)
struct tty *ttyp;
int	*ct;
{
	int	i;
	
	if (next_completion >= num_completions) {
        putc(STDOUT, BELL);
		return;
	}
    eraseword(ttyp, ct);
	strcpy(buf + *ct, mib[completions[next_completion]].mi_prefix);
	strcat(buf + *ct, mib[completions[next_completion++]].mi_name);
    write(STDOUT, buf + *ct, strlen(buf) - *ct);
	*ct = strlen(buf);
}

/*------------------------------------------------------------------------
 * find_completions - find all the completions in the mib for string
 * 		      str2compl.  Put the indices of the completions
 * 		      into the completions array.
 *------------------------------------------------------------------------
 */
find_completions()
{
	int 	i;
	
	for (i = 0; i < mib_entries; i++) 
		if (strnequ(mib[i].mi_name, str2compl, s2clen))
			completions[num_completions++] = i;
	next_completion = 0;
}

/*------------------------------------------------------------------------
 * parsevalue - parse the type and value of variable to set
 *------------------------------------------------------------------------
 */
parsevalue(wrd, bl)
char        **wrd;
struct snbentry	*bl;
{

extern long atol(char *);
    
    if (strequ(*wrd, "int"))
		SVTYPE(bl) = ASN1_INT;
    else if (strequ(*wrd, "counter"))
		SVTYPE(bl) = ASN1_COUNTER;
    else if (strequ(*wrd, "gauge"))
		SVTYPE(bl) = ASN1_GAUGE;
    else if (strequ(*wrd, "timeticks"))
		SVTYPE(bl) = ASN1_TIMETICKS;
    else if (strequ(*wrd, "str"))
		SVTYPE(bl) = ASN1_OCTSTR;
    else if (strequ(*wrd, "objid"))
		SVTYPE(bl) = ASN1_OBJID;
    else if (strequ(*wrd, "ipaddr"))
		SVTYPE(bl) = ASN1_IPADDR;
	else
		return SYSERR;

    getword(wrd);
    if (**wrd == NULL)
		return SYSERR;

	switch (SVTYPE(bl)) {
	case ASN1_INT:
	case ASN1_COUNTER:
	case ASN1_GAUGE:
	case ASN1_TIMETICKS:
        SVINT(bl) = atol(*wrd);
		return OK;
	case ASN1_OCTSTR:
        SVSTRLEN(bl) = strlen(*wrd);
		SVSTR(bl) = (char *) getmem(SVSTRLEN(bl));
        blkcopy(SVSTR(bl), *wrd, SVSTRLEN(bl));
		return OK;
	case ASN1_OBJID:
        SVOIDLEN(bl) = dot2oid(SVOID(bl), *wrd);
		return OK;
	case ASN1_IPADDR:
        dot2ip(SVIPADDR(bl), *wrd);
		return OK;
	}
}

/*------------------------------------------------------------------------
 *  echoch  --  echo a character with visual and ocrlf options
 *------------------------------------------------------------------------
 */
LOCAL echoch(ch, ttyp)
char		ch;
struct tty	*ttyp;
{
	if ((ch == NEWLINE || ch == RETURN) && ttyp->ecrlf) {
        putc(STDOUT, RETURN);
        putc(STDOUT, NEWLINE);
	} else if ((ch < BLANK || ch == 0177) && ttyp->evis) {
        putc(STDOUT, UPARROW);
        putc(STDOUT, ch + 0100);    /* make it printable    */
	} else
        putc(STDOUT, ch);
}

/*------------------------------------------------------------------------
 *  erase1  --  erase one character honoring erasing backspace
 *------------------------------------------------------------------------
 */
LOCAL erase1(ttyp, ct)
struct tty	*ttyp;
int 		ct;
{
	char	ch;

	ch = buf[ct];
    if (ch < BLANK || ch == 0177) {
		if (ttyp->evis)	{
            putc(STDOUT, BACKSP);
			if (ttyp->ieback) {
                putc(STDOUT, BLANK);
                putc(STDOUT, BACKSP);
			}
		}
        putc(STDOUT, BACKSP);
		if (ttyp->ieback) {
            putc(STDOUT, BLANK);
            putc(STDOUT, BACKSP);
		}
	} else {
        putc(STDOUT, BACKSP);
		if (ttyp->ieback) {
            putc(STDOUT, BLANK);
            putc(STDOUT, BACKSP);
		}
	}
}

/*------------------------------------------------------------------------
 *  eraseall  --  erase all characters honoring erasing backspace
 *------------------------------------------------------------------------
 */
LOCAL eraseall(ttyp, ct)
struct tty	*ttyp;
int		ct;
{
	for (--ct; ct >= 0; ct--) 
        erase1(ttyp, ct);
}

/*------------------------------------------------------------------------
 *  eraseword  --  erase the previous word
 *------------------------------------------------------------------------
 */
LOCAL eraseword(ttyp, ct)
struct tty	*ttyp;
int		*ct;
{
	/* if first character behind cursor is a blank, eat it up */
	if (buf[*ct - 1] == BLANK)
        erase1(ttyp, --(*ct));
	for (--(*ct); *ct >= 0 && buf[*ct] != BLANK; (*ct)--) 
        erase1(ttyp, *ct);
	(*ct)++;
}

/*------------------------------------------------------------------------
 * strnequ - if s1 and s2 have same length and same value, return TRUE
 *------------------------------------------------------------------------
 */
strnequ(s1, s2, n)
char	*s1, *s2;
int	n;
{
	if (strlen(s1) < n)
		return 0;
	return ! strncmp(s1, s2, n);
}

/*------------------------------------------------------------------------
 * snusage - print usage message
 *------------------------------------------------------------------------
 */
LOCAL snusage()
{
	char sb[BUFSIZE];

	sprintf(sb, "usage: snmp agent-mach-name\n");
    write(STDOUT, sb, strlen(sb));
}

static char *nextchar;		/* points to char that begins next word */

/*------------------------------------------------------------------------
 * initgetword - initialize the routines to get words off the input
 *------------------------------------------------------------------------
 */
LOCAL initgetword(buf)
char	*buf;
{
	nextchar = buf;		/* nextchar at beginnning of buffer */
}

/*------------------------------------------------------------------------
 * getword - get the next word from the input line
 *------------------------------------------------------------------------
 */
LOCAL getword(wrd)
char    **wrd;
{
	while (*nextchar == BLANK)	/* skip blanks */
		nextchar++;
    *wrd = nextchar;
	while (*nextchar != '\0' && *nextchar != BLANK)
		nextchar++;
	if (*nextchar != '\0')
		*nextchar++ = '\0';
}

/*------------------------------------------------------------------------
 * objd2oid - take a object string and parse it into an object id
 *------------------------------------------------------------------------
 */
objd2oid(str, oip)
char		*str;
struct oid	*oip;
{
	register char	*cp;
	struct mib_info	*onp;
	int		idlen, len, i;
	char		tmp[BUFSIZE];

	idlen = 0;
	cp = str;
	if (isalpha(*str)) {
		/*
		 * The string at least starts out with object descriptors,
		 * and may have object ids at the end. So, first, find the
		 * end of the descriptors part.
		 */
		for (; *cp != '\0' && (isalpha(*cp) || *cp == '.'); cp++)
			 /* empty */;
		len = cp - str;
		if (*cp != '\0') 
			len--;

		for (i = 0; i < mib_entries; i++) {
			onp = &mib[i];
			strcpy(tmp, onp->mi_prefix);
			strcat(tmp, onp->mi_name);
			if (strlen(tmp) == len && blkequ(tmp, str, len))
				break;
		}
		if (i >= mib_entries)
			return SYSERR;

		idlen = oip->len = onp->mi_objid.len;
		blkcopy(oip->id, onp->mi_objid.id, idlen*2);

		/* remove possible trailing ".0" */
		if (strequ(cp, "0"))
			return OK;
	}
	/* rest of variable name is object sub-id's */
	if (isdigit(*cp)) 
		oip->len = idlen + dot2oid(&oip->id[idlen], cp);
	return OK;
}

/*------------------------------------------------------------------------
 * dot2oid - convert a character representation of an object id into
 * 	     an array of sub-identifiers
 *------------------------------------------------------------------------
 */
int dot2oid(id, str)
unsigned short id[];   /* array of id's */
char	*str;
{
	register int totval;
	int 	numids = 0;
	
	while (TRUE) {
		totval = 0;
		while (isdigit(*str)) 
		    totval = totval * 10 + (*str++ - '0');
        id[numids++] = (unsigned short) totval;
		
		if (*str == '.')
		    str++;
		else
		    break;
	}
	return numids;
}

/*------------------------------------------------------------------------
 * parseoidlist - read a list of oid's from the input line
 *------------------------------------------------------------------------
 */
parseoidlist(rqdp, wrd)
struct req_desc	*rqdp;
char        **wrd;
{
	struct	snbentry *parseoid(), *bl;
	
    while (**wrd != NULL) {
        if ((bl = parseoid(wrd)) == (struct snbentry *) SYSERR) {
            snfreebl(rqdp->bindlf); 
            /* free the good portions of binding list too */
			return SYSERR;
        }
		if (rqdp->bindlf == NULL)
			rqdp->bindlf = rqdp->bindle = bl;
		else {
			bl->sb_prev = rqdp->bindle;
			rqdp->bindle = rqdp->bindle->sb_next = bl;
		}
	}
	return OK;
}

/*------------------------------------------------------------------------
 * parseoid - read an oid from the input line
 *------------------------------------------------------------------------
 */
struct snbentry *parseoid(wrd)
char        **wrd;
{
	struct	snbentry *bl, *getnewbl();
	
	bl = getnewbl();
    if (objd2oid(*wrd, &bl->sb_oid) == SYSERR) {
        freemem(bl, sizeof(struct snbentry));
		return (struct snbentry *) SYSERR;
	} else
		SVTYPE(bl) = ASN1_NULL;
    getword(wrd);
	return bl;
}

static struct oid lastobjid;	/* holds last objid that was returned 	*/
static int lastoidset = FALSE;	/* flags if there is a last objid	*/

/*------------------------------------------------------------------------
 * sendquery - parse the input line and send the query.  Input has
 * one of the following forms:
 * 		 [object-name]+
 * 		 next [object-name]+ 
 * 		 set [object-name type value]+
 *------------------------------------------------------------------------
 */
sendquery(server)
char	*server;
{
	struct req_desc	rqd;
	struct snbentry	*bl, *getnewbl();
    char        *wrd;
	int 		repl;

	initgetword(buf);
	rqd.reqtype = PDU_GET;		/* by default */
	rqd.bindle = rqd.bindlf = NULL;
    getword(&wrd);
    if (*wrd == '\0')
		return OK;

    if (strequ(wrd, "next")) {
		rqd.reqtype = PDU_GETN;
        getword(&wrd);
        if (parseoidlist(&rqd, &wrd) == SYSERR) {
            fprintf(STDOUT, "unknown variable\n");
			return SYSERR;
		}
		if ((bl = rqd.bindlf) == NULL) {
			if (lastoidset) { /* no oids so use last one */
				rqd.bindlf = rqd.bindle = bl = getnewbl();
				bl->sb_oid.len = lastobjid.len;
				blkcopy(bl->sb_oid.id, lastobjid.id,
					lastobjid.len*2);
				SVTYPE(bl) = ASN1_NULL;
			} else {
                fprintf(STDOUT, "bad syntax\n");
				return SYSERR;
			}
		}
    } else if (strequ(wrd, "set")) {
		rqd.reqtype = PDU_SET;
        if (parseset(&rqd) == SYSERR)
			return SYSERR;
    } else if (parseoidlist(&rqd, &wrd) == SYSERR) {
        fprintf(STDOUT, "unknown variable\n");
		return SYSERR;
	}
    repl = snclient(&rqd, server, STDOUT);
    
    /* the following code should be restructured */
    
    switch (repl) {
	case SCL_OK:
		if (rqd.err_stat == SNMP_OK)
            snmpprint(STDOUT,rqd.bindlf);
		else
            snerr(STDOUT, &rqd);
		break;
	case SCL_OPENF:
        fprintf(STDOUT, "snmp: open failed\n");
		break;
	case SCL_WRITEF:
        fprintf(STDOUT, "snmp: write failed\n");
		break;
	case SCL_NORESP:
        fprintf(STDOUT, "snmp: No response from server %s\n", server);
        break;
	case SCL_READF:
        fprintf(STDOUT, "snmp: read failed\n");
		break;
	case SCL_BADRESP:
        fprintf(STDOUT, "snmp: received bad response\n");
		break;
	}
	
	/* save this object for use with the "next" operation */
    lastobjid.len = rqd.bindlf->sb_oid.len;
	blkcopy(lastobjid.id, rqd.bindlf->sb_oid.id,
		rqd.bindlf->sb_oid.len*2);
	lastoidset = TRUE;
	snfreebl(rqd.bindlf);
	return OK;
}

/*------------------------------------------------------------------------
 * getnewbl - get a new bindlist node from memory and initialize it
 *------------------------------------------------------------------------
 */
struct snbentry *getnewbl()
{
     	struct snbentry *blp;

	blp = (struct snbentry *) getmem(sizeof(struct snbentry));
    blp->sb_next = blp->sb_prev = NULL;
	blp->sb_a1slen = 0;
	return blp;
}

/*------------------------------------------------------------------------
 * parseset - parse the words from the input line for a set operation
 *------------------------------------------------------------------------
 */
parseset(rqdp)
struct req_desc	*rqdp;
{
	struct snbentry	*bl, *parseoid();
    char        *wrd;

    for (getword(&wrd); *wrd != NULL; getword(&wrd)) {
        if ((bl = parseoid(&wrd)) == (struct snbentry *) SYSERR)
			return SYSERR;
		if (rqdp->bindlf) {
			bl->sb_prev = rqdp->bindle;
			rqdp->bindle = rqdp->bindle->sb_next = bl;
		} else
			rqdp->bindlf = rqdp->bindle = bl;
        if (parsevalue(&wrd, bl) == SYSERR) {
            fprintf(STDOUT, "bad syntax\n");
			return SYSERR;
		}
	}
	return OK;
}
